类型表  tool.oschina.net/commons

一.文件模块
  let fs=require('fs')

 1. fs.stat  检测是文件还是目录(目录 文件是否存在) 
 2. fs.mkdir  创建目录 （创建之前先判断是否存在） 
 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) 
 4. fs.appendFile 写入追加文件 
 5.fs.readFile 读取文件 
 6.fs.readdir 读取目录 
 7.fs.rename 重命名 
 8. fs.rmdir  删除目录 
 9. fs.unlink 删除文件

二.服务模块
 let  http=require('http')

 1.创建服务
  let server=http.createServer()
 
 2.接收请求
  server.on('request',function(request,response){
   require.url  请求路劲
  响应请求

  response.write(内容)  基本不用

  设置响应内容类型
  response.setHeader('Content-Type':'text/plain;charset=utf-8')

  从定向跳转页面
  response.statusCode=302
  response.setHeader('Location','/')
  结束响应并发送响应数据
  response.end(内容)
})

 3.启动服务器
  server.listen(3000,function(){

})


三 express框架

 1.引入 const express=require('express')

 2.创建实例 const app=express();

 3.响应并结束响应 
  app.get('/',(req,res)=>{
    res.send(data)
  }) 
 4.公开指定目录 app.use('/public/',express.static('./public/')) 当省略第一个参数的时候，可以通过省略/public的方式来直接访问/public/目录下的资源

 5.获取get的数据
 app.get('/',(req,res)=>{
    req.query
  }) 

 6.重定向跳转页面
 app.get('/',(req,res)=>{
    res.redirect（'/'）
  }) 
 
  7.post获取数据
  在express的资源的中间件里查看配置
  需要下载第三方插件body-parser
  var bodyParser = require('body-parser')
  app.use(bodyParser.urlencoded({ extended: false }))
  app.use(bodyParser.json())
  app.post('/',(req,res)=>{
    res.body
  })

  8.提取路由

  新建一个js文件  //router.js
  var express=require('exprexx')

 var router=express.Router()
  router.get('/',()=>{})

  最后在入口文件引入这个文件
  let router=require('./router')
  app.use(router)
四.修改完代码自动重启服务器

 1.npm install nodemon --save

 2.在命令行使用  nodemon app.js 